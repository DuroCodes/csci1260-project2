@page "/notes"
@inject NotesService NotesService

<h1>Notes</h1>

<div>
    <div class="card p-3 mb-4 shadow-sm">
        <h5>@(IsEditing ? "Edit Note" : "Add a Note")</h5>
        <div class="mb-2">
            <input class="form-control" @bind="_noteTitle" placeholder="Title"/>
        </div>
        <div class="mb-2">
            <textarea class="form-control" @bind="_noteContent" placeholder="Content"></textarea>
        </div>

        <div class="mb-3">
            <label class="form-label">References:</label>
            <div class="d-flex flex-wrap gap-2">
                @foreach (var reference in _noteReferences)
                {
                    <span class="badge bg-primary p-2">
                        @reference.Name (@reference.Type)
                        <button type="button" class="btn-close ms-2" @onclick="() => RemoveReference(reference)"></button>
                    </span>
                }
            </div>
        </div>

        <div class="input-group mb-3">
            <select class="form-select" @bind="_selectedReferenceId">
                <option value="">Select a reference</option>
                @foreach (var reference in _allReferences)
                {
                    <option value="@reference.Id">@reference.Name (@reference.Type)</option>
                }
            </select>
            <button class="btn btn-outline-secondary" @onclick="AddReferenceToNote">Add</button>
        </div>

        <button class="btn btn-success" @onclick="SaveNote">@(IsEditing ? "Update Note" : "Add Note")</button>
        @if (IsEditing)
        {
            <button class="btn btn-secondary mt-2" @onclick="CancelEdit">Cancel</button>
        }
    </div>

    <ul class="list-group">
        @foreach (var note in _notes)
        {
            <li class="list-group-item d-flex justify-content-between align-items-start">
                <div class="ms-2">
                    <div>
                        <h5 class="mb-1">@note.Title</h5>
                        <button class="btn btn-primary btn-sm" @onclick="() => EditNote(note)">Edit</button>
                        <button class="btn btn-danger btn-sm ms-2" @onclick="() => DeleteNote(note.Id)">Delete</button>
                    </div>
                    <p>@note.Content</p>
                    <div class="d-flex flex-wrap gap-2">
                        @foreach (var reference in note.References)
                        {
                            <a href="@GetReferenceUrl(reference)" class="badge bg-secondary p-2 text-decoration-none">
                                @reference.Name (@reference.Type)
                            </a>
                        }
                    </div>
                </div>
            </li>
        }
    </ul>
</div>

@code {
    private List<Note> _notes = [];
    private List<Reference> _allReferences = [];

    private string _noteTitle = "";
    private string _noteContent = "";
    private int? _selectedReferenceId;
    private List<Reference> _noteReferences = [];
    private int? _editingNoteId = null;

    private bool IsEditing => _editingNoteId.HasValue;

    protected override async Task OnInitializedAsync()
    {
        _notes = await NotesService.GetNotesAsync();
        LoadAllReferences();
    }

    private void LoadAllReferences()
    {
        _allReferences = CharacterService.GetCharacterGroups()
            .SelectMany(group => group)
            .Select(c => new Reference(c.Name.GetHashCode(), c.Name, "Character"))
            .ToList();

        _allReferences.AddRange(ItemService.GetItemGroups()
            .SelectMany(group => group)
            .Select(i => new Reference(i.Name.GetHashCode(), i.Name, "Item")));
    }

    private async Task SaveNote()
    {
        if (string.IsNullOrWhiteSpace(_noteTitle) || string.IsNullOrWhiteSpace(_noteContent))
            return;

        if (IsEditing)
        {
            var updatedNote = new Note(_editingNoteId.Value, _noteTitle, _noteContent, _noteReferences);
            await NotesService.UpdateNoteAsync(updatedNote);
        }
        else
        {
            var newNote = new Note(0, _noteTitle, _noteContent, _noteReferences);
            await NotesService.AddNoteAsync(newNote);
        }

        _notes = await NotesService.GetNotesAsync();
        ClearNoteForm();
    }

    private async Task DeleteNote(int id)
    {
        await NotesService.DeleteNoteAsync(id);
        _notes = await NotesService.GetNotesAsync();
    }

    private void EditNote(Note note)
    {
        _editingNoteId = note.Id;
        _noteTitle = note.Title;
        _noteContent = note.Content;
        _noteReferences = [..note.References];
    }

    private void CancelEdit() => ClearNoteForm();

    private void ClearNoteForm()
    {
        _editingNoteId = null;
        _noteTitle = "";
        _noteContent = "";
        _noteReferences = [];
    }

    private void AddReferenceToNote()
    {
        if (!_selectedReferenceId.HasValue) return;

        var reference = _allReferences.FirstOrDefault(r => r.Id == _selectedReferenceId);
        if (reference != null && !_noteReferences.Contains(reference)) _noteReferences.Add(reference);
    }

    private void RemoveReference(Reference reference) => _noteReferences.Remove(reference);

    private string GetReferenceUrl(Reference reference) =>
        reference.Type == "Character" ? $"/characters/{reference.Name}" : $"/items/{reference.Name}";

}